import de.ph1b.audiobook.signing.SigningDetailsProvider
import de.ph1b.audiobook.versioning.Dependencies
import de.ph1b.audiobook.versioning.Versions

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "../artifacts.gradle"

android {

  compileSdkVersion Versions.compileSdk
  buildToolsVersion Versions.buildTools

  defaultConfig {
    applicationId "de.ph1b.audiobook"
    minSdkVersion Versions.minSdk
    targetSdkVersion Versions.targetSdk
    versionCode Versions.versionCode
    versionName Versions.versionName

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    ndk {
      abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
    }
  }

  signingConfigs {
    release {
      def signingPropFile = new File('signing.properties')
      def signingDetailsProvider = new SigningDetailsProvider()
      def signingDetails = signingDetailsProvider.provide(signingPropFile)
      if (signingDetails != null) {
        storeFile = signingDetails.storeFile
        storePassword = signingDetails.storePassword
        keyAlias = signingDetails.keyAlias
        keyPassword = signingDetails.keyPassword
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
      signingConfig signingConfigs.release
      multiDexEnabled false
    }
    debug {
      minifyEnabled false
      shrinkResources false
      ext.enableCrashlytics = false
      multiDexEnabled true
    }
  }

  testOptions.unitTests.returnDefaultValues = true

  lintOptions.abortOnError = false

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  //noinspection GroovyMissingReturnStatement
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }

  flavorDimensions "free"
  productFlavors {
    opensource {
      dimension "free"
    }
    proprietary {
      dimension "free"
    }
  }

  dataBinding.enabled = true
}

androidExtensions {
  experimental = true
}

dependencies {
  implementation project(":core")
  implementation project(":common")
  implementation project(":data")
  implementation project(":covercolorextractor")

  implementation "com.github.PaulWoitaschek:ChapterReader:0.1.3"

  kapt Dependencies.dataBindingCompiler

  implementation Dependencies.Support.appCompat
  implementation Dependencies.Support.recyclerView
  implementation Dependencies.Support.design
  implementation Dependencies.Support.transitions
  implementation Dependencies.Support.constraintLayout

  implementation Dependencies.picasso

  implementation Dependencies.materialDialogs
  implementation Dependencies.materialCab

  implementation Dependencies.floatingActionButton

  proprietaryImplementation(Dependencies.crashlytics) {
    transitive = true
  }

  implementation Dependencies.Dagger.core
  implementation Dependencies.Dagger.android
  kapt Dependencies.Dagger.compiler
  kapt Dependencies.Dagger.androidProcessor

  testImplementation Dependencies.junit
  testImplementation Dependencies.truth
  testImplementation Dependencies.mockito
  testImplementation Dependencies.mockitoKotlin

  androidTestImplementation Dependencies.Support.testRunner
  androidTestImplementation Dependencies.truth

  implementation Dependencies.rxJava
  implementation Dependencies.rxAndroid
  implementation Dependencies.rxInterop
  implementation Dependencies.rxPreferences

  implementation Dependencies.Kotlin.std
  implementation Dependencies.Kotlin.coroutines
  implementation Dependencies.Kotlin.coroutinesAndroid

  implementation Dependencies.timber

  implementation Dependencies.ExoPlayer.core
  implementation Dependencies.ExoPlayer.flac
  implementation Dependencies.ExoPlayer.opus

  implementation Dependencies.Conductor.base
  implementation Dependencies.Conductor.support
  implementation Dependencies.Conductor.lifecycle

  implementation Dependencies.moshi

  implementation Dependencies.tapTarget
}

// task that is an alias for f-droid
task fdroid(dependsOn: ':app:assembleOpensourceRelease')
task release(dependsOn: ':app:assembleProprietaryRelease')

kotlin {
  experimental {
    coroutines "enable"
  }
}
